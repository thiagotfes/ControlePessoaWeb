package br.com.cpweb.bean;

import java.io.Serializable;
import java.sql.Connection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.PostConstruct;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;
import javax.faces.event.ActionEvent;

import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;

import org.omnifaces.util.Faces;
import org.omnifaces.util.Messages;
import org.primefaces.component.datatable.DataTable;

import br.com.cpweb.DAO.ClassificacaoFiscalDAO;
import br.com.cpweb.DAO.EmpresaDAO;
import br.com.cpweb.DAO.FabricanteDAO;
import br.com.cpweb.DAO.GrupoProdutoDAO;
import br.com.cpweb.DAO.IcmsDAO;
import br.com.cpweb.DAO.PessoaDAO;
import br.com.cpweb.DAO.ProdutoDAO;
import br.com.cpweb.DAO.TipoProdutoDAO;
import br.com.cpweb.DAO.UnidadeDAO;
import br.com.cpweb.domain.ClassificacaoFiscal;
import br.com.cpweb.domain.Empresa;
import br.com.cpweb.domain.Fabricante;
import br.com.cpweb.domain.GrupoProduto;
import br.com.cpweb.domain.Icms;
import br.com.cpweb.domain.Pessoa;
import br.com.cpweb.domain.Produto;
import br.com.cpweb.domain.TipoProduto;
import br.com.cpweb.domain.Unidade;
import br.com.cpweb.util.HibernateUtil;

@SuppressWarnings("serial")
@ManagedBean
@ViewScoped
public class ProdutoBean implements Serializable {
	private Produto produto;
	private List<Produto> produtos;
	private List<Fabricante> fabricantes;
	private List<Icms> icmss;
	private List<ClassificacaoFiscal> classificacoesfiscais;
	private List<GrupoProduto> gruposprodutos;
	private List<Empresa> empresas;
	private List<Unidade> unidades;
	private List<TipoProduto> tiposprodutos;
	private Pessoa fornecedor;
	private List<Pessoa> fornecedores;

	public Produto getProduto() {
		return produto;
	}

	public void setProduto(Produto produto) {
		this.produto = produto;
	}

	public List<Produto> getProdutos() {
		return produtos;
	}

	public void setProdutos(List<Produto> produtos) {
		this.produtos = produtos;
	}

	public List<Fabricante> getFabricantes() {
		return fabricantes;
	}

	public void setFabricantes(List<Fabricante> fabricantes) {
		this.fabricantes = fabricantes;
	}

	public List<Icms> getIcmss() {
		return icmss;
	}

	public void setIcmss(List<Icms> icmss) {
		this.icmss = icmss;
	}

	public List<ClassificacaoFiscal> getClassificacoesfiscais() {
		return classificacoesfiscais;
	}

	public void setClassificacoesfiscais(
			List<ClassificacaoFiscal> classificacoesfiscais) {
		this.classificacoesfiscais = classificacoesfiscais;
	}

	public List<GrupoProduto> getGruposprodutos() {
		return gruposprodutos;
	}

	public void setGruposprodutos(List<GrupoProduto> gruposprodutos) {
		this.gruposprodutos = gruposprodutos;
	}

	public List<Empresa> getEmpresas() {
		return empresas;
	}

	public void setEmpresas(List<Empresa> empresas) {
		this.empresas = empresas;
	}

	public List<Unidade> getUnidades() {
		return unidades;
	}

	public void setUnidades(List<Unidade> unidades) {
		this.unidades = unidades;
	}

	public List<TipoProduto> getTiposprodutos() {
		return tiposprodutos;
	}

	public void setTiposprodutos(List<TipoProduto> tiposprodutos) {
		this.tiposprodutos = tiposprodutos;
	}

	public Pessoa getFornecedor() {
		return fornecedor;
	}

	public void setFornecedor(Pessoa fornecedor) {
		this.fornecedor = fornecedor;
	}

	public List<Pessoa> getFornecedores() {
		return fornecedores;
	}

	public void setFornecedores(List<Pessoa> fornecedores) {
		this.fornecedores = fornecedores;
	}

	@PostConstruct
	public void listar() {
		try {
			ProdutoDAO produtoDAO = new ProdutoDAO();
			produtos = produtoDAO.listar();
		} catch (RuntimeException erro) {
			Messages.addGlobalError("Ocorreu um erro ao tentar listar os produtos");
			erro.printStackTrace();
		}
	}

	public void novo() {
		try {
			produto = new Produto();

			FabricanteDAO fabricanteDAO = new FabricanteDAO();
			fabricantes = fabricanteDAO.listar();

			IcmsDAO icmsDAO = new IcmsDAO();
			icmss = icmsDAO.listar();

			ClassificacaoFiscalDAO classificacaofiscalDAO = new ClassificacaoFiscalDAO();
			classificacoesfiscais = classificacaofiscalDAO.listar();

			GrupoProdutoDAO grupoprodutoDAO = new GrupoProdutoDAO();
			gruposprodutos = grupoprodutoDAO.listar();

			EmpresaDAO empresaDAO = new EmpresaDAO();
			empresas = empresaDAO.listar();

			UnidadeDAO unidadeDAO = new UnidadeDAO();
			unidades = unidadeDAO.listar();

			TipoProdutoDAO tipoprodutoDAO = new TipoProdutoDAO();
			tiposprodutos = tipoprodutoDAO.listar();

			PessoaDAO pessoaDAO = new PessoaDAO();
			fornecedores = pessoaDAO.listar();

		} catch (RuntimeException erro) {
			Messages.addFlashGlobalError("Ocorreu um erro ao tentar gerar um novo produto");
			erro.printStackTrace();
		}
	}

	public void salvar() {
		try {
			ProdutoDAO produtoDAO = new ProdutoDAO();
			produtoDAO.merge(produto);

			produto = new Produto();

			FabricanteDAO fabricanteDAO = new FabricanteDAO();
			fabricantes = fabricanteDAO.listar();

			IcmsDAO icmsDAO = new IcmsDAO();
			icmss = icmsDAO.listar();

			ClassificacaoFiscalDAO classificacaofiscalDAO = new ClassificacaoFiscalDAO();
			classificacoesfiscais = classificacaofiscalDAO.listar();

			GrupoProdutoDAO grupoprodutoDAO = new GrupoProdutoDAO();
			gruposprodutos = grupoprodutoDAO.listar();

			EmpresaDAO empresaDAO = new EmpresaDAO();
			empresas = empresaDAO.listar();

			UnidadeDAO unidadeDAO = new UnidadeDAO();
			unidades = unidadeDAO.listar();

			TipoProdutoDAO tipoprodutoDAO = new TipoProdutoDAO();
			tiposprodutos = tipoprodutoDAO.listar();

			PessoaDAO pessoaDAO = new PessoaDAO();
			fornecedores = pessoaDAO.listar();

			produtos = produtoDAO.listar();

			Messages.addGlobalInfo("Produto salvo com sucesso");
		} catch (RuntimeException erro) {
			Messages.addGlobalError("Ocorreu um erro ao tentar salvar o produto");
			erro.printStackTrace();
		}
	}

	public void excluir(ActionEvent evento) {
		try {
			produto = (Produto) evento.getComponent().getAttributes()
					.get("produtoSelecionado");

			ProdutoDAO produtoDAO = new ProdutoDAO();
			produtoDAO.excluir(produto);
			
			produtos = produtoDAO.listar();

			Messages.addGlobalInfo("Produto removido com sucesso");
		} catch (RuntimeException  erro) {
			Messages.addGlobalError("Ocorreu um erro ao tentar remover o produto");
			erro.printStackTrace();
		}
	}

	public void editar(ActionEvent evento) {
		try {
			produto = (Produto) evento.getComponent().getAttributes()
					.get("produtoSelecionado");

			FabricanteDAO fabricanteDAO = new FabricanteDAO();
			fabricantes = fabricanteDAO.listar();
			IcmsDAO icmsDAO = new IcmsDAO();
			icmss = icmsDAO.listar();
			ClassificacaoFiscalDAO classificacaofiscalDAO = new ClassificacaoFiscalDAO();
			classificacoesfiscais = classificacaofiscalDAO.listar();
			GrupoProdutoDAO grupoprodutoDAO = new GrupoProdutoDAO();
			gruposprodutos = grupoprodutoDAO.listar();
			EmpresaDAO empresaDAO = new EmpresaDAO();
			empresas = empresaDAO.listar();
			UnidadeDAO unidadeDAO = new UnidadeDAO();
			unidades = unidadeDAO.listar();
			TipoProdutoDAO tipoprodutoDAO = new TipoProdutoDAO();
			tiposprodutos = tipoprodutoDAO.listar();
			PessoaDAO pessoaDAO = new PessoaDAO();
			fornecedores = pessoaDAO.listar();

		} catch (RuntimeException erro) {
			Messages.addFlashGlobalError("Ocorreu um erro ao tentar selecionar um produto");
			erro.printStackTrace();
		}
	}


	public void popular() {
		try {
			if (fornecedor != null) {
				PessoaDAO pessoaDAO = new PessoaDAO();
				fornecedores = pessoaDAO.buscarPorFornecedor(fornecedor
						.getNome());

			} else {
				PessoaDAO pessoaDAO = new PessoaDAO();
				fornecedores = pessoaDAO.listar("nome");
			}

		} catch (RuntimeException erro) {
			Messages.addGlobalError("Ocorreu um erro ao tentar filtrar as cidades");
			erro.printStackTrace();
		}
	}
	
	public void imprimir(){
		try {
			DataTable tabela =  (DataTable) Faces.getViewRoot().findComponent("formListagem:tabela");
			
			String caminho = Faces.getRealPath("/reports/produtos.jasper");
			
			Map<String, Object> parametros = new HashMap<>();
			
			Connection conexao = HibernateUtil.getConexao();
			
			JasperPrint relatorio = JasperFillManager.fillReport(caminho, parametros, conexao);
			
			JasperPrintManager.printReport(relatorio, true);
		} catch (JRException erro) {
			Messages.addGlobalError("Ocorreu um erro ao tentar gerar o relat√≥rio");
			erro.printStackTrace();
		}
	}
}
